name: DevSecOps App Runner Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: devsecops-zap-app-repo
  APP_RUNNER_SERVICE_NAME: devsecops-zap-app
  AWS_ACCOUNT_ID: 879381264902
  REPO_ACCESS_ARN: arn:aws:iam::879381264902:role/devsecops-AppRunnerAccessRole

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      ecr_uri: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

  deploy:
    name: Deploy to App Runner
    runs-on: ubuntu-latest
    needs: [build]
    env:
      ECR_IMAGE_URI: ${{ needs.build.outputs.ecr_uri }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Service ARN (if exists)
        id: get-arn
        run: |
          SERVICE_ARN=$(aws apprunner list-services --output json \
            | jq -r '.ServiceSummaryList[] | select(.ServiceName=="'"${{ env.APP_RUNNER_SERVICE_NAME }}"'") | .ServiceArn')
          if [ -z "$SERVICE_ARN" ]; then
            echo "EXISTS=false" >> $GITHUB_OUTPUT
          else
            echo "EXISTS=true" >> $GITHUB_OUTPUT
            echo "SERVICE_ARN=$SERVICE_ARN" >> $GITHUB_OUTPUT
          fi

      - name: Create App Runner Service
        if: steps.get-arn.outputs.EXISTS == 'false'
        run: |
          aws apprunner create-service \
            --service-name ${{ env.APP_RUNNER_SERVICE_NAME }} \
            --source-configuration '{
              "ImageRepository": {
                "ImageIdentifier": "'"${{ env.ECR_IMAGE_URI }}"'",
                "ImageRepositoryType": "ECR",
                "ImageConfiguration": {
                  "Port": "8080",
                  "RuntimeEnvironmentVariables": {
                    "NODE_ENV": "production"
                  }
                }
              },
              "AutoDeploymentsEnabled": false,
              "AuthenticationConfiguration": {
                "AccessRoleArn": "'"${{ env.REPO_ACCESS_ARN }}"'"
              }
            }' \
            --instance-configuration '{"Cpu":"1024","Memory":"2048"}' \
            --health-check-configuration '{"Protocol":"HTTP","Path":"/health","Interval":10,"Timeout":5,"HealthyThreshold":2,"UnhealthyThreshold":5}'

      - name: Update App Runner Service
        if: steps.get-arn.outputs.EXISTS == 'true'
        run: |
          aws apprunner update-service \
            --service-arn ${{ steps.get-arn.outputs.SERVICE_ARN }} \
            --image-repository '{
              "ImageIdentifier": "'"${{ env.ECR_IMAGE_URI }}"'",
              "ImageRepositoryType": "ECR",
              "ImageConfiguration": {"Port":"8080"}
            }'

      - name: Wait for Deployment and Get URL
        id: get-url
        run: |
          # Fetch ARN again in case it was just created
          SERVICE_ARN=$(aws apprunner list-services --output json \
            | jq -r '.ServiceSummaryList[] | select(.ServiceName=="'"${{ env.APP_RUNNER_SERVICE_NAME }}"'") | .ServiceArn')
          if [ -z "$SERVICE_ARN" ]; then
            echo "Error: App Runner service ARN not found."
            exit 1
          fi

          aws apprunner wait service-running --service-arn "$SERVICE_ARN"

          SERVICE_URL=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --output json | jq -r .Service.ServiceUrl)
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT

    outputs:
      service_url: ${{ steps.get-url.outputs.SERVICE_URL }}

  scan:
    name: Security Scan (DAST)
    runs-on: ubuntu-latest
    needs: [deploy]
    env:
      APP_URL: ${{ needs.deploy.outputs.service_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Wait a bit for service stabilization
        run: sleep 15

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: ${{ env.APP_URL }}
          max_time: 300
          config_file: zap-config/zap-baseline.conf
          fail_action: true
          allow_issue_writing: false

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: ZAP-Report-${{ github.sha }}
          path: zap_report.html
