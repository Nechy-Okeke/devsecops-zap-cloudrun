name: DevSecOps App Runner Pipeline

# Triggers the workflow on pushes to the main branch
on:
  push:
    branches:
      - main

# Define global environment variables if needed
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: devsecops-zap-app-repo
  APP_RUNNER_SERVICE_NAME: devsecops-zap-app
  AWS_ACCOUNT_ID: 879381264902 # Your specific AWS Account ID

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      # Export the full ECR URI with the unique commit SHA tag for the next job
      ecr_uri: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Use the standard Docker build/push action
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          
  deploy:
    name: Deploy to App Runner (AWS CLI)
    runs-on: ubuntu-latest
    needs: [build]
    
    env:
      ECR_IMAGE_URI: ${{ needs.build.outputs.ecr_uri }}
      # ARN for the manually created role
      REPO_ACCESS_ARN: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/devsecops-AppRunnerAccessRole

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: ${{ env.AWS_REGION }}

      # --- NEW LOGIC: Use AWS CLI to Create or Update the service ---
      - name: Check for existing App Runner service
        id: check-service
        run: |
          # Query the service list. If it succeeds, the service exists.
          aws apprunner describe-service --service-id ${{ env.APP_RUNNER_SERVICE_NAME }} 2>/dev/null && echo "EXISTS=true" >> $GITHUB_OUTPUT || echo "EXISTS=false" >> $GITHUB_OUTPUT
        continue-on-error: true # Continue even if describe-service fails (meaning service doesn't exist)
        
      - name: Create App Runner Service (if it doesn't exist)
        if: steps.check-service.outputs.EXISTS == 'false'
        id: create-service
        run: |
          aws apprunner create-service \
            --service-name ${{ env.APP_RUNNER_SERVICE_NAME }} \
            --source-configuration '{
              "imageRepository": {
                "imageIdentifier": "${{ env.ECR_IMAGE_URI }}",
                "imageRepositoryType": "ECR",
                "imageConfiguration": {
                  "port": "8080",
                  "runtimeEnvironmentVariables": {
                      "NODE_ENV": "production"
                  }
                }
              },
              "autoDeploymentsEnabled": false,
              "authenticationConfiguration": {
                "accessRoleArn": "${{ env.REPO_ACCESS_ARN }}"
              }
            }' \
            --instance-configuration '{"cpu": "1024", "memory": "2048"}' \
            --health-check-configuration '{"protocol": "HTTP", "path": "/health", "interval": 10, "timeout": 5, "healthyThreshold": 2, "unhealthyThreshold": 5}' \
            --output json | jq -r .Service.ServiceUrl > service_url.txt
          
      - name: Update App Runner Service (if it exists)
        if: steps.check-service.outputs.EXISTS == 'true'
        id: update-service
        run: |
          aws apprunner update-service \
            --service-id ${{ env.APP_RUNNER_SERVICE_NAME }} \
            --image-repository '{
              "imageIdentifier": "${{ env.ECR_IMAGE_URI }}",
              "imageRepositoryType": "ECR",
              "imageConfiguration": {
                "port": "8080"
              }
            }' \
            --output json | jq -r .Service.ServiceUrl > service_url.txt

      # Wait for deployment to complete and extract the URL
      - name: Wait for Deployment Completion and Get URL
        id: get-url
        run: |
          SERVICE_ARN=$(aws apprunner list-services --output json | jq -r '.ServiceSummaryList[] | select(.ServiceName=="${{ env.APP_RUNNER_SERVICE_NAME }}") | .ServiceArn')
          
          # Wait until the service status is 'RUNNING' and latest operation status is 'SUCCEEDED'
          aws apprunner wait service-running --service-arn $SERVICE_ARN
          
          # Get the final URL
          SERVICE_URL=$(aws apprunner describe-service --service-arn $SERVICE_ARN --output json | jq -r .Service.ServiceUrl)
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT

    outputs:
      # Pass the Service URL to the next job (scan)
      service_url: ${{ steps.get-url.outputs.SERVICE_URL }}


  scan:
    name: Security Scan (DAST)
    runs-on: ubuntu-latest
    needs: [deploy]
    env:
      APP_URL: ${{ needs.deploy.outputs.service_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # The wait step is now less critical as the deploy job waits for service-running status
      - name: Final wait for App Runner readiness (buffer)
        run: |
          echo "Giving an extra 15 seconds for service health checks to fully stabilize..."
          sleep 15

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: ${{ env.APP_URL }}
          max_time: 300
          config_file: zap-config/zap-baseline.conf
          fail_action: true
          allow_issue_writing: false
          
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: ZAP-Report-${{ github.sha }}
          path: zap_report.html
