name: DevSecOps App Runner Pipeline

# Triggers the workflow on pushes to the main branch
on:
  push:
    branches:
      - main

# Define global environment variables if needed
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: devsecops-zap-app-repo
  APP_RUNNER_SERVICE_NAME: devsecops-zap-app

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      # Export the full ECR URI with the unique commit SHA tag for the next job
      ecr_uri: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Use the standard Docker build/push action
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./app # Assuming Dockerfile and source code are in the 'app' directory
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          
  deploy:
    name: Deploy to App Runner
    runs-on: ubuntu-latest
    needs: [build]
    
    # Environment variables specific to the deployment
    env:
      ECR_IMAGE_URI: ${{ needs.build.outputs.ecr_uri }}
      AWS_ACCOUNT_ID: 879381264902 # Your specific AWS Account ID

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy App Runner Service (Direct Deployment)
        id: deploy-service
        # CRITICAL FIX: Use the correct, official action name for App Runner deployment
        uses: aws-actions/configure-apprunner@v1
        with:
          service-name: ${{ env.APP_RUNNER_SERVICE_NAME }}
          image-uri: ${{ env.ECR_IMAGE_URI }}
          image-repository-access-role-arn: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/devsecops-AppRunnerAccessRole
          instance-cpu: 1024
          instance-memory: 2048
          port: 8080
          health-check-path: /health
          auto-deploy-enabled: false 
          
    outputs:
      service_url: ${{ steps.deploy-service.outputs.service-url }}


  scan:
    name: Security Scan (DAST)
    runs-on: ubuntu-latest
    needs: [deploy]
    env:
      APP_URL: ${{ needs.deploy.outputs.service_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # The scan job is still here! It just runs last.
      - name: Wait for App Runner to be ready
        run: |
          echo "Waiting 60 seconds for App Runner service to stabilize at ${{ env.APP_URL }}..."
          sleep 60

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: ${{ env.APP_URL }}
          max_time: 300
          config_file: zap-config/zap-baseline.conf
          fail_action: true
          allow_issue_writing: false
          
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: ZAP-Report-${{ github.sha }}
          path: zap_report.html
