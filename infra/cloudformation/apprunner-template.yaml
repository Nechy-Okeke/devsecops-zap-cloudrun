AWSTemplateFormatVersion: '2010-09-09'
Description: AWS App Runner Service for DevSecOps Project with ECR, IAM, and CloudWatch Alarms

Parameters:
  # This value is passed dynamically by the GitHub Actions pipeline
  EcrImageUri:
    Type: String
    Description: URI of the ECR image pushed by the build stage (e.g., <account_id>.dkr.ecr.<region>.amazonaws.com/repo-name:tag)

Resources:
  # 1. IAM Role for App Runner to pull images from ECR
  AppRunnerAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ 'build.apprunner.amazonaws.com' ]
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ECRPullPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetAuthorizationToken
                Resource: '*'
      Path: /
      RoleName: devsecops-AppRunnerAccessRole

  # 2. AWS App Runner Service (The serverless hosting environment)
  AppRunnerService:
    Type: AWS::AppRunner::Service
    Properties:
      ServiceName: devsecops-zap-app
      SourceConfiguration:
        ImageRepository:
          ImageIdentifier: !Ref EcrImageUri
          ImageRepositoryType: ECR
          ImageConfiguration:
            Port: '8080' # Must match the EXPOSE in Dockerfile and PORT in server.js
            RuntimeEnvironmentVariables:
              - Name: NODE_ENV
                Value: production
        AuthenticationConfiguration:
          AccessRoleArn: !GetAtt AppRunnerAccessRole.Arn
      
      InstanceConfiguration:
        Cpu: '1024' # 1 vCPU
        Memory: '2048' # 2 GB
        
      HealthCheckConfiguration:
        Path: /health # Matches the health endpoint in app/server.js

  # 3. CloudWatch Alarm for High CPU Usage
  AppRunnerHighCpuAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: devsecops-High-CPU-Usage
      AlarmDescription: "Alarm triggered if App Runner CPU utilization exceeds 80% for 3 minutes"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 3
      Period: 60 # 1 minute period
      Statistic: Average
      Threshold: 80
      Namespace: AWS/AppRunner
      MetricName: CpuUtilization
      Dimensions:
        - Name: ServiceId
          Value: !GetAtt AppRunnerService.ServiceId
      # You can add AlarmActions (e.g., to an SNS Topic) here

  # 4. CloudWatch Alarm for Service Errors (5xx HTTP responses)
  AppRunnerServerErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: devsecops-Server-Error-Rate
      AlarmDescription: "Alarm triggered if 5xx HTTP errors occur."
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Period: 300 # 5 minute period
      Statistic: Sum
      Threshold: 1 # Threshold of 1 or more 5xx errors in 5 minutes
      Namespace: AWS/AppRunner
      MetricName: 5xxResponse
      Dimensions:
        - Name: ServiceId
          Value: !GetAtt AppRunnerService.ServiceId
      # You can add AlarmActions (e.g., to an SNS Topic) here

Outputs:
  ServiceUrl:
    Description: The live URL of the deployed App Runner Service
    Value: !GetAtt AppRunnerService.ServiceUrl
    Export:
      Name: devsecops-ServiceUrl
