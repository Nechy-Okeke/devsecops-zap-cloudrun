AWSTemplateFormatVersion: '2010-09-09'
Description: AWS App Runner Service for DevSecOps Project with ECR, IAM, and CloudWatch Alarms

Parameters:
  # RESTORED: This Parameter is essential. It receives the ECR Image URI 
  # dynamically from the GitHub Actions build job output.
  EcrImageUri:
    Type: String
    Description: URI of the ECR image pushed by the build stage (e.g., <account_id>.dkr.ecr.<region>.amazonaws.com/repo-name:tag)

Resources:
  # 1. IAM Role for App Runner to pull images from ECR
  # NOTE: The Service Principal must be 'build.apprunner.amazonaws.com' for image deployment.
  AppRunnerAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              # CRITICAL FIX: Use the Build service principal for deployment access
              Service: [ 'build.apprunner.amazonaws.com' ] 
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        # Standard AWS policy for ECR access
        - arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECR
      Path: /
      RoleName: devsecops-AppRunnerAccessRole # Maintain a consistent, named role

  # 2. AWS App Runner Service 
  AppRunnerService:
    Type: AWS::AppRunner::Service
    Properties:
      ServiceName: devsecops-zap-app # Changed to match the previous service name
      # ADDED: Trivial Description to ensure the stack is always updatable.
      Description: Latest deployment for DevSecOps pipeline
      SourceConfiguration:
        ImageRepository:
          # CRITICAL FIX: Use the Parameter passed by the GitHub Action
          ImageIdentifier: !Ref EcrImageUri 
          ImageRepositoryType: ECR 
          ImageConfiguration:
            Port: '8080' 
            # RESTORED: Environment variables
            RuntimeEnvironmentVariables:
              NODE_ENV: production
        AuthenticationConfiguration:
          # CRITICAL FIX: Use the IAM Role defined above
          AccessRoleArn: !GetAtt AppRunnerAccessRole.Arn
      
      InstanceConfiguration:
        Cpu: '1024' # 1 vCPU
        Memory: '2048' # 2 GB
        
      HealthCheckConfiguration:
        Path: /health # Ensure this matches your server.js
        Protocol: HTTP
        Interval: 10
        Timeout: 5
        HealthyThreshold: 1
        UnhealthyThreshold: 5
        
      # Observability is set to true to ensure logs are captured
      ObservabilityConfiguration:
        ObservabilityEnabled: true 

  # 3. CloudWatch Alarm for High CPU Usage (Best Practice Monitoring)
  AppRunnerHighCpuAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: devsecops-High-CPU-Usage
      AlarmDescription: "Alarm triggered if App Runner CPU utilization exceeds 80% for 3 minutes"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 3
      Period: 60 
      Statistic: Average
      Threshold: 80
      Namespace: AWS/AppRunner
      MetricName: CpuUtilization
      Dimensions:
        - Name: ServiceId
          Value: !GetAtt AppRunnerService.ServiceId

  # 4. CloudWatch Alarm for Service Errors (Best Practice Monitoring)
  AppRunnerServerErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: devsecops-Server-Error-Rate
      AlarmDescription: "Alarm triggered if 5xx HTTP errors occur."
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Period: 300 
      Statistic: Sum
      Threshold: 1 
      Namespace: AWS/AppRunner
      MetricName: 5xxResponse
      Dimensions:
        - Name: ServiceId
          Value: !GetAtt AppRunnerService.ServiceId


Outputs:
  ServiceUrl:
    Description: The live URL of the deployed App Runner Service
    Value: !GetAtt AppRunnerService.ServiceUrl
    Export:
      Name: devsecops-ServiceUrl